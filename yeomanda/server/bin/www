#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
* Get port from environment and store in Express.
*/

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
* Create HTTP server.
*/

var cluster = require('cluster')
var numCPUs = require('os').cpus().length;

/**
 * 이렇게 nodejs의 내장 모듈인 cluster으로 클러스터링 할 수 있지만, 실무에서는 pm2로 클러스터링한다고 한다. 
 */
// if(cluster.isMaster){
//   for (var i = 0; i < numCPUs; i++) {
//     cluster.fork();
//   }
//   cluster.on('exit', function(worker, code, signal) { // 워커가 종료되었을 때
//     console.log('worker ' + worker.process.pid + ' died');
//     console.log('code' , code , 'signal', signal)
//     cluster.fork(); // 워커가 죽어도 다시 생성
//   });
// }
// else{
//   var server = http.createServer(app);
//   app.io.attach(server)
//   server.listen(port);
//   // setTimeout(() => { //워커가 존재하는지 확인하기 위해 1초마다 강제 종료
//   //   process.exit(1);
//   // }, 1000);
//   server.on('error', onError);
//   server.on('listening', onListening);
//   console.log(`${process.pid} 번 워커 실행중...`)
// }

var server = http.createServer(app);
  app.io.attach(server)
  server.listen(port);
  // setTimeout(() => { //워커가 존재하는지 확인하기 위해 1초마다 강제 종료
  //   process.exit(1);
  // }, 1000);
  server.on('error', onError);
  server.on('listening', onListening);
/**
*  
*/
/**
* Listen on provided port, on all network interfaces.
*/




/**
* Normalize a port into a number, string, or false.
*/

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
* Event listener for HTTP server "error" event.
*/

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
* Event listener for HTTP server "listening" event.
*/

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

